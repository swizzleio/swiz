// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockfileutil

import mock "github.com/stretchr/testify/mock"

// FileUrlHelper is an autogenerated mock type for the FileUrlHelper type
type FileUrlHelper struct {
	mock.Mock
}

// GetPathFromUrl provides a mock function with given fields: location, preserveFilename
func (_m *FileUrlHelper) GetPathFromUrl(location string, preserveFilename bool) (string, error) {
	ret := _m.Called(location, preserveFilename)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (string, error)); ok {
		return rf(location, preserveFilename)
	}
	if rf, ok := ret.Get(0).(func(string, bool) string); ok {
		r0 = rf(location, preserveFilename)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(location, preserveFilename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheme provides a mock function with given fields: location
func (_m *FileUrlHelper) GetScheme(location string) (string, error) {
	ret := _m.Called(location)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenUrl provides a mock function with given fields: location
func (_m *FileUrlHelper) OpenUrl(location string) ([]byte, error) {
	ret := _m.Called(location)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(location)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenUrlWithBaseDir provides a mock function with given fields: baseDir, location
func (_m *FileUrlHelper) OpenUrlWithBaseDir(baseDir string, location string) ([]byte, error) {
	ret := _m.Called(baseDir, location)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]byte, error)); ok {
		return rf(baseDir, location)
	}
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(baseDir, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(baseDir, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UrlWithBaseDir provides a mock function with given fields: baseDir, location
func (_m *FileUrlHelper) UrlWithBaseDir(baseDir string, location string) (string, error) {
	ret := _m.Called(baseDir, location)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(baseDir, location)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(baseDir, location)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(baseDir, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteUrl provides a mock function with given fields: location, data
func (_m *FileUrlHelper) WriteUrl(location string, data []byte) error {
	ret := _m.Called(location, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(location, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteUrlWithBaseDir provides a mock function with given fields: baseDir, location, data
func (_m *FileUrlHelper) WriteUrlWithBaseDir(baseDir string, location string, data []byte) error {
	ret := _m.Called(baseDir, location, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(baseDir, location, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFileUrlHelper interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileUrlHelper creates a new instance of FileUrlHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileUrlHelper(t mockConstructorTestingTNewFileUrlHelper) *FileUrlHelper {
	mock := &FileUrlHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
